class AudioVisualizer {
    constructor() {
        this.canvas = document.createElement('canvas');
        this.canvas.id = 'visualizer';
        this.ctx = this.canvas.getContext('2d');
        this.isSetup = false;
        this.audioContext = null;
        this.analyser = null;
        this.dataArray = null;
        this.running = false;
        
        // Style the canvas
        this.canvas.style.position = 'fixed';
        this.canvas.style.top = '0';
        this.canvas.style.left = '0';
        this.canvas.style.width = '100%';
        this.canvas.style.height = '100%';
        this.canvas.style.zIndex = '-1';
        this.canvas.style.opacity = '0';
        this.canvas.style.transition = 'opacity 1s ease';
        
        // Add canvas to body
        document.body.appendChild(this.canvas);
        
        // Handle resize
        window.addEventListener('resize', this.handleResize.bind(this));
        this.handleResize();
    }

    handleResize() {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
    }

    async setupAudio(audioElement) {
        try {
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const source = this.audioContext.createMediaElementSource(audioElement);
            this.analyser = this.audioContext.createAnalyser();
            
            this.analyser.fftSize = 256;
            const bufferLength = this.analyser.frequencyBinCount;
            this.dataArray = new Uint8Array(bufferLength);
            
            source.connect(this.analyser);
            this.analyser.connect(this.audioContext.destination);
            
            this.isSetup = true;
        } catch (error) {
            console.error('Error setting up audio:', error);
            throw error;
        }
    }

    start() {
        if (!this.isSetup) {
            console.warn('Visualizer not set up');
            return;
        }
        
        this.running = true;
        this.draw();
    }

    stop() {
        this.running = false;
    }

    draw() {
        if (!this.running) return;

        requestAnimationFrame(this.draw.bind(this));
        
        this.analyser.getByteFrequencyData(this.dataArray);
        
        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        const barWidth = (this.canvas.width / this.dataArray.length) * 2.5;
        let barHeight;
        let x = 0;
        
        for (let i = 0; i < this.dataArray.length; i++) {
            barHeight = this.dataArray[i] * 2;
            
            const gradient = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);
            gradient.addColorStop(0, 'rgba(236, 72, 153, 0.7)');  // Pink
            gradient.addColorStop(1, 'rgba(147, 197, 253, 0.7)'); // Blue
            
            this.ctx.fillStyle = gradient;
            this.ctx.fillRect(x, this.canvas.height - barHeight, barWidth, barHeight);
            
            x += barWidth + 1;
        }
    }
}

// Make it globally available
window.AudioVisualizer = AudioVisualizer;
